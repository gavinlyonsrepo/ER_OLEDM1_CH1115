/*!
	@file: ER_OLEDM1_CH1115_BITMAP.ino
	@brief Example file for ER_OLEDM1_CH1115 library, showing how to display bitmaps.
	
		| test no | Desc | bitmap in PROGMEM | data addressing | note  | 
		| ---- |  ---- |  ---- | ----  | ---- |
		|1| OledBitmap() |Yes| Vertical | buffer not used, writes directly to screen. |
		|2| OLEDBuffer() |No|  Vertical | used internally mostly. |
		|3|  Screen init test |No| Vertical | Can be used when initialising screen at start up |
		|4A|  drawBitmap() |Yes| Vertical | setDrawBitmapAddr(true) |
		|4B|  drawBitmap() |Yes| Horizontal  | setDrawBitmapAddr(false) |
		* 
	@note 
		-# GPIO is for arduino UNO for other tested MCU see extras folder at URL
		-# See option section to select which test to run 
		-# This is for hardware SPI for software SPI see ER_OLEDM1_CH1115_SWSPI.ino example.
	@test
		-# Test 1 OLEDBitmap method
		-# Test 2 OLEDBuffer Method
		-# Test 3 Bitmap splashscreen technique
		-# Test 4a drawBitmap() method, Vertical addressing
		-# Test 4b drawBitmap() method, Horizontal  addressing

*/

#include "ER_OLEDM1_CH1115.hpp"

//Contrast 00 to FF , 0x80 is default. user adjust
#define OLEDcontrast 0x80

// GPIO 5-wire SPI interface
#define RES 8  // GPIO pin number pick any you want
#define DC 9   // GPIO pin number pick any you want
#define CS 10  // GPIO pin number pick any you want
// GPIO pin number SDA(UNO 11) , HW SPI , MOSI
// GPIO pin number SCK(UNO 13) , HW SPI , SCK

// Buffer setup
#define MYOLEDHEIGHT 64
#define MYOLEDWIDTH 128

// instantiate an OLED object
ERMCH1115 myOLED(DC, RES, CS);

// **************** USER OPTION SELECTION ***************
// Pick a test to run ONE test and one TEST only
#define test1  // OLEDBitmap
//#define test2  // OLEDBuffer
//#define test3  //  Init Buffer with Data
//#define test4  //  DrawBitmap

//*******************************************************

// '128x64px "g lyons" + shapes , SW used to make https://javl.github.io/image2cpp/ vertical addressing
#ifdef test1
  const PROGMEM uint8_t fullscreenBitmap[MYOLEDWIDTH * (MYOLEDHEIGHT / 8)] = {
#endif
#if defined(test2) || defined(test3) || defined(test4)
uint8_t fullScreenBuffer[MYOLEDWIDTH * (MYOLEDHEIGHT / 8)] = {
#endif
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
    0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
    0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
    0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
    0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
    0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
    0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
    0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0x60, 0x60, 0x20, 0x20, 0x20, 0x20, 0x60,
    0x40, 0xc0, 0xc0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0xe0, 0xe0, 0xe0, 0x20, 0x20, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xf8, 0xfe, 0xff, 0x0f, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x20, 0x60, 0xe1, 0xe7, 0x60, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x38, 0xf8, 0xf8, 0xc8, 0x00, 0x00,
    0x00, 0x00, 0xc8, 0x78, 0x08, 0x00, 0x00, 0xc0, 0xe0, 0x70, 0x10, 0x08, 0x08, 0x08, 0x08, 0x18,
    0x70, 0xe0, 0xc0, 0x00, 0x00, 0x10, 0xf0, 0xf8, 0xf8, 0x20, 0x10, 0x18, 0x18, 0x38, 0xf8, 0xf0,
    0x00, 0x00, 0x00, 0x00, 0xf0, 0xd8, 0x88, 0x08, 0x08, 0x08, 0x38, 0x00, 0x00, 0xff, 0xff, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x03, 0x0f, 0x1f, 0x3e, 0x70, 0x60, 0x40, 0xc0, 0x80, 0x80, 0x80, 0x80, 0x80,
    0xc0, 0x60, 0x7f, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xff, 0xff, 0xff, 0x80, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x80, 0xc0, 0xc0, 0xe0, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0f, 0x3e, 0xf8,
    0x70, 0x0e, 0x01, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x3f, 0x7e, 0x60, 0xc0, 0x80, 0x80, 0x80, 0xc0,
    0x60, 0x3f, 0x1f, 0x02, 0x00, 0x80, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff,
    0x80, 0x00, 0x00, 0x00, 0xe1, 0x83, 0x83, 0x87, 0x86, 0x8e, 0x7c, 0x38, 0x00, 0xff, 0xff, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
    0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
    0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x38, 0x38, 0x30, 0x18, 0x06, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
    0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
    0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xff, 0xff, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x06, 0x06, 0x06,
    0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6,
    0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6,
    0xf6, 0xf6, 0xf6, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07,
    0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x1f, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x1f, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f,
    0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f,
    0x1f, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x1f, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c,
    0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c,
    0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1f, 0x1f, 0x1f, 0x1f, 0x00 };

#ifdef test2
// 'small Bitmap', 20x20px bitmap bi-colour Vertical addressed ,not in progmem Test 2
const uint8_t smallBitmapNPM[60] = {
  0xff, 0x3f, 0x0f, 0x07, 0x03, 0x13, 0x33, 0x39, 0x39, 0x79, 0xf9, 0xf9, 0xfb, 0xf3, 0xf7, 0xe3,
  0x87, 0x0f, 0x1f, 0xff, 0xf9, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0f,
  0x1d, 0x19, 0x10, 0x19, 0x0f, 0x00, 0xc0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0e, 0x0c, 0x0c, 0x08, 0x08,
  0x08, 0x00, 0x00, 0x08, 0x08, 0x08, 0x0c, 0x0c, 0x0e, 0x0f, 0x0f, 0x0f
};
#endif

#ifdef test4
// 'small Bitmap', 20x20px bitmap bi-colour Vertical addressed Test 4A
const PROGMEM uint8_t smallBitmap[60] = {
  0xff, 0x3f, 0x0f, 0x07, 0x03, 0x13, 0x33, 0x39, 0x39, 0x79, 0xf9, 0xf9, 0xfb, 0xf3, 0xf7, 0xe3,
  0x87, 0x0f, 0x1f, 0xff, 0xf9, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0f,
  0x1d, 0x19, 0x10, 0x19, 0x0f, 0x00, 0xc0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0e, 0x0c, 0x0c, 0x08, 0x08,
  0x08, 0x00, 0x00, 0x08, 0x08, 0x08, 0x0c, 0x0c, 0x0e, 0x0f, 0x0f, 0x0f
};
// 'small Bitmap', 20x20px bitmap bi-colour horizontal addressed Test 4B
const PROGMEM uint8_t smallBitmapHa[60] = {
  0xff, 0xff, 0xf0, 0xfe, 0x0f, 0xf0, 0xf0, 0x02, 0xf0, 0xe1, 0xf8, 0x70,
  0xc7, 0xfe, 0x30, 0xc3, 0xff, 0x10, 0x80, 0x7f, 0x10, 0x80, 0x3f, 0x90,
  0x80, 0x3d, 0x80, 0x00, 0x30, 0x80, 0x00, 0x18, 0x80, 0x80, 0x1d, 0x80,
  0x80, 0x0f, 0x10, 0x80, 0x00, 0x10, 0xc0, 0x00, 0x30, 0xc0, 0x00, 0x30,
  0xe0, 0x00, 0x70, 0xf0, 0x00, 0xf0, 0xfc, 0x03, 0xf0, 0xff, 0x9f, 0xf0
};
#endif

void setup() {
  myOLED.OLEDbegin(OLEDcontrast);  // initialize the OLED
  myOLED.OLEDFillScreen(0x00, 0);  // Clears screen
  delay(500);
}

void loop() {
  while (1) {
#ifdef test1
    Test1();
#endif
#ifdef test2
    Test2();
#endif
#ifdef test3
    Test3();
#endif
#ifdef test4
    Test4();
#endif
  }
}

#ifdef test1
void Test1(void) {
  myOLED.OLEDBitmap(0, 0, MYOLEDWIDTH, MYOLEDHEIGHT, fullscreenBitmap);
  while (1) { delay(5000); };
}
#endif

#ifdef test2
void Test2(void) {
  const uint8_t bitmapNum = 10;
  const uint8_t bitmapSize = 20;
  //  x ,y,w,h, bitmap
  myOLED.OLEDBuffer(30, 10, 20, 20, (uint8_t*)smallBitmapNPM);
  myOLED.OLEDBuffer(70, 10, 20, 20, (uint8_t*)smallBitmapNPM);
  for (uint8_t i = 0; i < bitmapNum; i++) {
    myOLED.OLEDBuffer(random(128 - bitmapSize), random(64 - bitmapSize), bitmapSize, bitmapSize, (uint8_t*)smallBitmapNPM);
    delay(500);
  }
  while (1) { delay(5000); };
}

#endif

// Test 3
#ifdef test3
void Test3(void) {

  // instantiate an Shared buffer object , only one in this case to cover whole screen
  ERMCH1115_SharedBuffer fullScreen(fullScreenBuffer, MYOLEDWIDTH, MYOLEDHEIGHT, 0, 0);
  myOLED.ActiveBufferPtr = &fullScreen;  // Point the shared screen to the active buffer
  myOLED.OLEDupdate();                   // update the screen
  while (1) { delay(5000); };
}
#endif

// test (4)
#ifdef test4
void Test4(void) {
  // instantiate an Shared buffer object , only one in this case to cover whole screen
  ERMCH1115_SharedBuffer fullScreen(fullScreenBuffer, MYOLEDWIDTH, MYOLEDHEIGHT, 0, 0);
  myOLED.ActiveBufferPtr = &fullScreen;
  myOLED.OLEDclearBuffer();  // Clear active buffer

  // Test 4A 
  myOLED.setDrawBitmapAddr(true);  // for Bitmap Data Vertical  addressed , default
  myOLED.drawBitmap(0, 0, smallBitmap, 20, 20, OLED_WHITE, OLED_BLACK);
  myOLED.drawBitmap(30, 20, smallBitmap, 20, 20, OLED_BLACK, OLED_WHITE);
  myOLED.OLEDupdate();
  delay(5000);

  myOLED.OLEDclearBuffer();  // Clear active buffer
  // Test 4B
  myOLED.setDrawBitmapAddr(false);  // for Bitmap Data Horziontal addressed
  myOLED.drawBitmap(50, 10, smallBitmapHa, 20, 20, OLED_WHITE, OLED_BLACK);
  myOLED.drawBitmap(100, 20, smallBitmapHa, 20, 20, OLED_BLACK, OLED_WHITE);
  myOLED.OLEDupdate();
  delay(5000);

  while (1) { delay(5000); };
}

#endif
